#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
	tapping-term-ms = <200>;
	flavor = "tap-preferred";
};

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3
#define BT 4

#define DTAP &dbl_sh // Macro to strike a key twice

/ {
	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <250>;
			quick_tap_ms = <150>;
			global-quick-tap;
			retro-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		lay_mt: layer_mod_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_MOD_TAP";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			bindings = <&mo>, <&to>;
		};
		lsk: layer_sticky {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_STICKY";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			bindings = <&mo>, <&sk>;
		};
		comma_q: comma_question_mark {
			compatible = "zmk,behavior-tap-dance";
			label = "COMMA_QUESTION_MARK";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp COMMA>, <&kp QMARK>;
		};
		dot_x: period_exclamation_mark {
			compatible = "zmk,behavior-tap-dance";
			label = "PERIOD_EXCLAMATION_MARK";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp DOT>, <&kp EXCL>, <&dotdotdot>;
		};
		dqt_sqt: double_quote_single_quote {
			compatible = "zmk,behavior-tap-dance";
			label = "DOUBLE_SINGLE_QUOTE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp DQT>, <&kp SQT>;
		};
		lr_brc: left_right_brace {
			compatible = "zmk,behavior-tap-dance";
			label = "LEFT_RIGHT_BRACE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LBRC>, <&kp RBRC>;
		};
		lr_par: left_right_parethesis {
			compatible = "zmk,behavior-tap-dance";
			label = "LEFT_RIGHT_PARENTHESIS";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LPAR>, <&kp RPAR>;
		};
		lr_bkt: left_right_bracket {
			compatible = "zmk,behavior-tap-dance";
			label = "LEFT_RIGHT_BRACKET";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LBKT>, <&kp RBKT>;
		};
		til_gr: tilde_grave {
			compatible = "zmk,behavior-tap-dance";
			label = "TILDE_GRAVE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp TILDE>, <&kp GRAVE>;
		};
		sm_cl: semicolon_colon {
			compatible = "zmk,behavior-tap-dance";
			label = "SEMICOLON_COLON";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mt LSHIFT SEMI>, <&kp COLON>;
		};
		sh_td: tap_dance_shift_lock {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_SHIFT_LOCK";
			#binding-cells = <0>;
			tapping-term-ms = <130>;
			bindings = <&mo NAV>, <&caps_word>;
		};
		sys_dbl: system_layer_double {
			compatible = "zmk,behavior-tap-dance";
			label = "SYSTEM_LAYER_DOUBLE";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&none>, <&go_to_sys>;
		};
	};

	macros {
		go_to_sys: go_to_system_layer {
			label = "go_to_system_layer";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp S &kp Y &kp S>
				, <&macro_wait_time 500>
				, <&macro_tap &kp BSPC>
				, <&macro_wait_time 0 &kp BSPC &kp BSPC>
				, <&to BT>
				;
		};
		dotdotdot: three_dots {
			label = "three_dots";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp DOT &kp DOT &kp DOT>;
		};
		dbl_sh: double_shift {
			label = "double_shift";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp LSHIFT>;
		};
		michael: michael {
			label = "Michael";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp LS(M) &kp I &kp C &kp H &kp A &kp E &kp L>
				;
		};
		overman: overman {
			label = "Overman";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp LS(O) &kp V &kp E &kp R &kp M &kp A &kp N>
				;
		};
		m_overman: m_overman {
			label = "Michael Overman";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp LS(M) &kp I &kp C &kp H &kp A &kp E &kp L>
				, <&macro_tap &kp SPACE>
				, <&macro_tap &kp LS(O) &kp V &kp E &kp R &kp M &kp A &kp N>
				;
		};
		cvs_empnum: cvs_employee_number {
			label = "c178540";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp C &kp N1 &kp N8 &kp N9 &kp N6 &kp N5 &kp N8>
				;
		};
		cvs_email: cvs_email {
			label = "michael.overman@cvshealth.com";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp M &kp I &kp C &kp H &kp A &kp E &kp L &kp DOT &kp O &kp V &kp E &kp R &kp M &kp A &kp N>
				, <&kp AT &kp C &kp V &kp S &kp H &kp E &kp A &kp L &kp T &kp H &kp DOT &kp C &kp O &kp M>
				;
		};
		per_email: personal_email {
			label = "overman.michael@gmail.com";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap &kp O &kp V &kp E &kp R &kp M &kp A &kp N &kp DOT &kp M &kp I &kp C &kp H &kp A &kp E &kp L>
				, <&kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>
				;
		};
		git_commit: git_commit {
			label = "git_commit";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&kp G &kp I &kp T &kp SPACE>
				, <&kp C &kp O &kp M &kp M &kp I &kp T &kp SPACE>
				, <&kp MINUS &kp M &kp SPACE &kp DQT &kp DQT>
				, <&kp LEFT>
				;
		};
		git_add: git_add {
			label = "git_add";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&kp G &kp I &kp T &kp SPACE>
				, <&kp A &kp D &kp D &kp SPACE &kp STAR>
				;
		};
		git_status: git_status {
			label = "git_status";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&kp G &kp I &kp T &kp SPACE>
				, <&kp S &kp T &kp A &kp T &kp U &kp S>
				;
		};
		git_push: git_push {
			label = "git_push";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&kp G &kp I &kp T &kp SPACE>
				, <&kp P &kp U &kp S &kp H>
				;
		};
		git_pull: git_pull {
			label = "git_pull";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&kp G &kp I &kp T &kp SPACE>
				, <&kp P &kp U &kp L &kp L>
				;
		};
	};


	keymap{
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&dqt_sqt	&comma_q 	&dot_x	&kp P	&kp Y	&kp F	&kp G	&kp C		&kp R		&kp L
				&hm LSHIFT A	&hm LCTRL O	&hm LALT E	&hm LGUI U	&kp I		&kp D	&hm RGUI H	&hm RALT T	&hm RCTRL N	&hm RSHIFT S
				&sm_cl	&kp Q	&kp J		&kp K		&kp X		&kp B	&kp M		&kp W		&kp V		&kp Z
										&lt NUM ESC &sh_td	&mt LGUI RET	&lt FUN SPACE
			>;
		};
		
		nav_layer {
			bindings = <
				&trans	&trans	&kp LS(LC(TAB))	&kp LC(TAB)	&trans		&trans	&kp LG(UP)	&kp UP	&kp LG(DOWN)	&trans
				&trans	&trans	&kp LS(LG(GRAVE))	&kp LG(GRAVE)	&trans		&kp LG(LEFT)	&kp LEFT	&kp DOWN	&kp RIGHT	&kp LG(RIGHT)
				&trans	&trans	&kp LC(LEFT)	&kp LC(RIGHT)	&trans		&trans	&kp LA(LEFT)	&none	&kp LA(RIGHT)	&trans
										&to NUM	&lsk NAV LSHIFT	&sys_dbl	&trans
			>;
		};

		num_layer {
			bindings = <
				&til_gr	&kp LG(PIPE)	&kp PIPE	&kp HASH	&lr_brc	&kp STAR	&kp N7		&kp N8		&kp N9		&kp FSLH 
				&kp AMPS		&kp CARET	&kp DOLLAR	&kp AT		&lr_par	&kp PLUS	&kp N4		&kp N5		&kp N6		&kp MINUS
				&kp ESC			&kp PRCNT	&kp DEL		&kp BSPC	&lr_bkt	&kp EQUAL	&kp N1		&kp N2		&kp N3		&kp UNDER
														&to NAV 	&kp LSHIFT &to DEF	&kp N0
				>;
		};

		fun_layer {
			bindings = <
				&michael	&trans	&git_push	&cvs_empnum	&trans		&trans	&kp F7	&kp F8	&kp F9	&kp LS(LA(C_VOL_UP))
				&overman	&trans	&git_status	&cvs_email	&git_add		&trans	&kp F4	&kp F5	&kp F6	&kp LS(LA(C_VOL_DN))
				&m_overman	&kp Q	&git_pull	&per_email	&git_commit		&trans	&kp F1	&kp F2	&kp F3	&kp Z
										&trans	&kp LSHIFT		&to DEF	&trans
			>;
		};

		sys_layer {
			bindings = <
				&reset			&none			&bt BT_PRV		&bt BT_NXT		&bt BT_CLR		&none	&none	&none	&none	&reset
				&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4		&none	&none	&none	&none	&none
				&bootloader		&none			&none			&none			&none				&none	&none	&none	&none	&bootloader
																&none			&none				&to DEF	&none
			>;
		};

	};
};
